@using Common
@model Datas.Models.ViewModels.DailyItemModel
<div class="row">
    <div class="col-md-12">
        <ul class="nav nav-tabs" id="tab-data" role="tablist">
            <li class="nav-item"><a class="nav-link active" id="info-data-tab" data-toggle="pill" href="#info-data" aria-controls="info-data" aria-selected="true">Thông tin vật dụng</a></li>
            <li class="nav-item"><a class="nav-link" id="material-structure-tab" data-toggle="pill" href="#material-structure" aria-controls="material-structure" aria-selected="false">Chất liệu & Cấu tạo</a></li>
            <li class="nav-item"><a class="nav-link" id="usage-method-tab" data-toggle="pill" href="#usage-method" aria-controls="usage-method" aria-selected="false">Công dụng & Cách sử dụng</a></li>
            <li class="nav-item"><a class="nav-link" id="culture-history-tab" data-toggle="pill" href="#culture-history" aria-controls="culture-history" aria-selected="false">Ý nghĩa văn hóa & Lịch sử</a></li>
            <li class="nav-item"><a class="nav-link" id="status-preservation-tab" data-toggle="pill" href="#status-preservation" aria-controls="status-preservation" aria-selected="false">Hiện trạng & Bảo tồn</a></li>
            <li class="nav-item"><a class="nav-link" id="image-data-tab" data-toggle="pill" href="#image-data" aria-controls="image-data" aria-selected="false">Hình ảnh</a></li>
            <li class="nav-item"><a class="nav-link" id="file-data-tab" data-toggle="pill" href="#file-data" aria-controls="file-data" aria-selected="false">Tài liệu</a></li>
        </ul>
        <div class="tab-content" id="tab-data-content" style="padding-top:20px;">
            <div class="tab-pane fade show active" id="info-data" role="tabpanel" aria-labelledby="info-data-tab">
                @Html.Partial("_InfoData")
            </div>
            <div class="tab-pane fade" id="material-structure" role="tabpanel" aria-labelledby="material-structure-tab">
                @Html.Partial("_MaterialStructureData")
            </div>
            <div class="tab-pane fade" id="usage-method" role="tabpanel" aria-labelledby="usage-method-tab">
                @Html.Partial("_UsageMethodData")
            </div>
            <div class="tab-pane fade" id="culture-history" role="tabpanel" aria-labelledby="culture-history-tab">
                @Html.Partial("_CultureHistoryData")
            </div>
            <div class="tab-pane fade" id="status-preservation" role="tabpanel" aria-labelledby="status-preservation-tab">
                @Html.Partial("_StatusPreservationData")
            </div>
            <div class="tab-pane fade" id="image-data" role="tabpanel" aria-labelledby="image-data-tab">
                @Html.Partial("_ImageData")
            </div>
            <div class="tab-pane fade" id="file-data" role="tabpanel" aria-labelledby="file-data-tab">
                @Html.Partial("_AttachmentData")
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {
        var elfNode, elfInstance, dialogName,
            imgShowMaxSize = 400, // Max image size(px) to show
            customData = {},
            // Set image size to show
            setShowImgSize = function (url, callback) {
                $('<img/>').attr('src', url).on('load', function () {
                    var w = this.naturalWidth,
                        h = this.naturalHeight,
                        s = imgShowMaxSize;
                    if (w > s || h > s) {
                        if (w > h) {
                            h = Math.floor(h * (s / w));
                            w = s;
                        } else {
                            w = Math.floor(w * (s / h));
                            h = s;
                        }
                    }
                    callback({ width: w, height: h });
                });
            },
            // Set values to dialog of CKEditor
            setDialogValue = function (file, fm) {
                var url = fm.convAbsUrl(file.url),
                    dialog = CKEDITOR.dialog.getCurrent(),
                    dialogName = dialog._.name,
                    tabName = dialog._.currentTabId,
                    urlObj;
                if (dialogName == 'image') {
                    urlObj = 'txtUrl';
                } else if (dialogName == 'flash') {
                    urlObj = 'src';
                } else if (dialogName == 'files' || dialogName == 'link') {
                    urlObj = 'url';
                } else if (dialogName == 'image2') {
                    urlObj = 'src';
                } else {
                    return;
                }
                if (tabName == 'Upload') {
                    tabName = 'info';
                    dialog.selectPage(tabName);
                }
                dialog.setValueOf(tabName, urlObj, url);
                if (dialogName == 'image' && tabName == 'info') {
                    setShowImgSize(url, function (size) {
                        dialog.setValueOf('info', 'txtWidth', size.width);
                        dialog.setValueOf('info', 'txtHeight', size.height);
                        dialog.preview.$.style.width = size.width + 'px';
                        dialog.preview.$.style.height = size.height + 'px';
                        dialog.setValueOf('Link', 'txtUrl', url);
                        dialog.setValueOf('Link', 'cmbTarget', '_blank');
                    });
                } else if (dialogName == 'image2' && tabName == 'info') {
                    dialog.setValueOf(tabName, 'alt', file.name + ' (' + elfInstance.formatSize(file.size) + ')');
                    setShowImgSize(url, function (size) {
                        setTimeout(function () {
                            dialog.setValueOf('info', 'width', size.width);
                            dialog.setValueOf('info', 'height', size.height);
                        }, 100);
                    });
                } else if (dialogName == 'files' || dialogName == 'link') {
                    try {
                        dialog.setValueOf('info', 'linkDisplayText', file.name);
                    } catch (e) { }
                }
            };

        // Setup upload tab in CKEditor dialog
        CKEDITOR.on('dialogDefinition', function (event) {
            var editor = event.editor,
                dialogDefinition = event.data.definition,
                tabCount = dialogDefinition.contents.length,
                browseButton, uploadButton, submitButton, inputId;

            for (var i = 0; i < tabCount; i++) {
                try {
                    browseButton = dialogDefinition.contents[i].get('browse');
                    uploadButton = dialogDefinition.contents[i].get('upload');
                    submitButton = dialogDefinition.contents[i].get('uploadButton');
                } catch (e) {
                    browseButton = uploadButton = null;
                }

                if (browseButton !== null) {
                    browseButton.hidden = false;
                    browseButton.onClick = function (dialog, i) {
                        dialogName = CKEDITOR.dialog.getCurrent()._.name;
                        if (dialogName === 'image2') {
                            dialogName = 'image';
                        }
                        if (elfNode) {
                            elfNode.dialog('open');
                        }
                    }
                }

                if (uploadButton !== null && submitButton !== null) {
                    uploadButton.hidden = false;
                    submitButton.hidden = false;
                    uploadButton.onChange = function () {
                        inputId = this.domId;
                    }
                    // upload a file to elFinder connector
                    submitButton.onClick = function (e) {
                        dialogName = CKEDITOR.dialog.getCurrent()._.name;
                        if (dialogName === 'image2') {
                            dialogName = 'image';
                        }
                        var target = "v1_ZGF0YXM1",
                            name = $('#' + inputId),
                            input = name.find('iframe').contents().find('form').find('input:file'),
                            error = function (err) {
                                alert(elfInstance.i18n(err).replace('<br>', '\n'));
                            };

                        if (input.val()) {
                            var fd = new FormData();
                            fd.append('cmd', 'upload');
                            fd.append('target', target);
                            fd.append('overwrite', 0); // Instruction to save alias when same name file exists
                            $.each(customData, function (key, val) {
                                fd.append(key, val);
                            });
                            fd.append('upload[]', input[0].files[0]);
                            $.ajax({
                                url: editor.config.filebrowserUploadUrl,
                                type: "POST",
                                data: fd,
                                processData: false,
                                contentType: false,
                                dataType: 'json'
                            })
                                .done(function (data) {
                                    if (data.added && data.added[0]) {
                                        elfInstance.exec('reload');
                                        setDialogValue(data.added[0], elfInstance);
                                    } else {
                                        error(data.error || data.warning || 'errUploadFile');
                                    }
                                })
                                .fail(function () {
                                    error('errUploadFile');
                                })
                                .always(function () {
                                    input.val('');
                                });
                        }
                        return false;
                    }
                }
            }
        });

        // Create elFinder dialog for CKEditor
        CKEDITOR.on('instanceReady', function (e) {
            elfNode = $('<div style="padding:0;">');
            elfNode.dialog({
                autoOpen: false,
                modal: true,
                width: '80%',
                title: 'Server File Manager',
                create: function (event, ui) {

                    // elFinder configure
                    elfInstance = $(this).elfinder({
                        baseUrl: "/lib/elfinder/",
                        url: "/Admin/file-system/connector",
                        rememberLastDir: false,
                        useBrowserHistory: false,
                        resizable: false,
                        width: '100%',

                        lang: 'vi',
                        dialogContained: true,
                        getFileCallback: function (file, fm) {
                            setDialogValue(file, fm);
                            elfNode.dialog('close');
                        }
                    }).elfinder('instance');
                },
                open: function () {
                    elfNode.find('div.elfinder-toolbar input').blur();
                    setTimeout(function () {
                        elfInstance.enable();
                    }, 100);
                },
                resizeStop: function () {
                    elfNode.trigger('resize');
                }
            }).parent().css({ 'zIndex': '11000' });

            // CKEditor instance
            var cke = e.editor;

            // Setup the procedure when DnD image upload was completed
            cke.widgets.registered.uploadimage.onUploaded = function (upload) {
                var self = this;
                setShowImgSize(upload.url, function (size) {
                    self.replaceWith('<img src="' + encodeURI(upload.url) + '" width="' + size.width + '" height="' + size.height + '"></img>');
                });
            }

            // Setup the procedure when send DnD image upload data to elFinder's connector
            cke.on('fileUploadRequest', function (e) {
                var target = "v1_ZGF0YXM1",
                    fileLoader = e.data.fileLoader,
                    xhr = fileLoader.xhr,
                    formData = new FormData();
                e.stop();
                xhr.open('POST', fileLoader.uploadUrl, true);
                formData.append('cmd', 'upload');
                formData.append('target', target);
                formData.append('upload[]', fileLoader.file, fileLoader.fileName);
                xhr.send(formData);
            }, null, null, 4);

            // Setup the procedure when got DnD image upload response
            cke.on('fileUploadResponse', function (e) {
                var file;
                e.stop();
                var data = e.data,
                    res = JSON.parse(data.fileLoader.xhr.responseText);
                if (!res.added || res.added.length < 1) {
                    data.message = 'Can not upload.';
                    e.cancel();
                } else {
                    elfInstance.exec('reload');
                    file = res.added[0];
                    if (file.url && file.url != '1') {
                        data.url = file.url;
                        try {
                            data.url = decodeURIComponent(data.url);
                        } catch (e) { }
                    } else {
                        data.url = elfInstance.options.url + ((elfInstance.options.url.indexOf('?') === -1) ? '?' : '&') + 'cmd=file&target=' + file.hash;
                    }
                    data.url = elfInstance.convAbsUrl(data.url);
                }
            });
        });

        // setup CKEditor
        CKEDITOR.replace('Content', {
            filebrowserBrowseUrl: '#',
            extraPlugins: 'image2',
            filebrowserUploadUrl: '/Admin/file-system/connector',
            imageUploadUrl: '/Admin/file-system/connector'
        });
        $('#Content').show();

        // Initialize CKEditor for other rich text fields in the added tabs if needed
        var richTextFields = [
            'CulturalValue', 'Origin', 'HistoricalChanges', 'RelatedCustoms'
        ];

        richTextFields.forEach(function(fieldId) {
            if ($('#' + fieldId).length) {
                CKEDITOR.replace(fieldId, {
                    height: '250px',
                    filebrowserBrowseUrl: '#',
                    extraPlugins: 'image2',
                    filebrowserUploadUrl: '/Admin/file-system/connector',
                    imageUploadUrl: '/Admin/file-system/connector'
                });
                $('#' + fieldId).show();
            }
        });
    });
</script>
